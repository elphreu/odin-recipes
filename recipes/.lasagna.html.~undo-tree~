(undo-tree-save-format-version . 1)
"09b08ab42cbafb5d47c12e70859fd4122e63145c"
[nil nil nil nil (25241 27406 457969 329000) 0 nil]
([nil nil ((21 . 22) (21 . 22) (t 25241 26957 310218 30000)) nil (25241 27406 458085 439000) 0 nil])
([nil nil ((1 . 2) (1 . 2)) nil (25241 27427 976444 444000) 0 nil] [nil nil ((nil rear-nonsticky nil 49 . 50) (nil fontified nil 44 . 50) (nil fontified nil 39 . 44) (nil fontified nil 33 . 39) (nil fontified nil 28 . 33) (nil fontified nil 23 . 28) (23 . 50)) ((#("home/ephy/repos/odin-recipe" 0 5 (fontified nil) 5 10 (fontified nil) 10 16 (fontified nil) 16 21 (fontified nil) 21 26 (fontified nil) 26 27 (fontified nil rear-nonsticky nil)) . 23) (undo-tree-id0 . -27) (undo-tree-id1 . -27) (undo-tree-id2 . -26) (undo-tree-id3 . -27) (nil rear-nonsticky t 49 . 50)) (25241 27406 457959 867000) 0 nil])
([nil nil ((1 . 2)) nil (25241 27427 976442 713000) 0 nil])
nil
([nil nil ((#("  " 0 2 (fontified nil)) . -111) (#("  " 0 2 (fontified nil)) . -101) (#("    " 0 4 (fontified nil)) . -75) (#("    " 0 4 (fontified nil)) . -47) (#("  " 0 2 (fontified nil)) . -36) (1 . 146) (#("!" 0 1 (fontified t)) . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 2) nil (25241 27427 976438 379000) 0 nil])
([nil nil ((157 . 158)) nil (25241 27427 976519 562000) 0 nil])
([nil nil ((118 . 122) (119 . 121) (#("    " 0 4 (fontified nil)) . 118) (118 . 122) (117 . 119)) nil (25241 27434 641465 812000) 0 nil] [nil nil ((117 . 118)) ((#("
" 0 1 (fontified t)) . 117) (undo-tree-id16 . -1)) (25241 27427 976409 621000) 0 nil])
([nil nil ((#("<h1> Lasagna !!</h1>
" 0 1 (fontified t) 1 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t) 4 15 (fontified t face (bold underline)) 15 17 (fontified t) 17 19 (fontified t face font-lock-function-name-face) 19 21 (fontified t)) . 142) (undo-tree-id17 . -20) (undo-tree-id18 . -21) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . 2) (undo-tree-id23 . -20) (undo-tree-id24 . 6) (undo-tree-id25 . -16) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -20) (undo-tree-id31 . -4) (undo-tree-id32 . -20) (undo-tree-id33 . -20) (undo-tree-id34 . -20) (undo-tree-id35 . -19) (undo-tree-id36 . -20) (undo-tree-id37 . -18) (undo-tree-id38 . -19) (undo-tree-id39 . -17) (undo-tree-id40 . -18) (undo-tree-id41 . -20) (undo-tree-id42 . -20) (undo-tree-id43 . -21) 162) nil (25241 27434 641459 206000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 138 . 139) (nil fontified nil 137 . 139) (nil fontified nil 135 . 137) (nil fontified nil 133 . 135) (nil fontified nil 122 . 133) (nil fontified nil 121 . 122) (nil fontified nil 119 . 121) (nil fontified nil 118 . 119) (118 . 139)) nil (25241 27434 641040 69000) 0 nil])
([nil nil ((118 . 122) 138 (t 25241 27434 650229 176000)) nil (25241 27494 917757 317000) 0 nil])
([nil nil ((147 . 150)) nil (25241 27494 917753 885000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -148) (undo-tree-id61 . -1) (#("m" 0 1 (fontified t)) . -149) (undo-tree-id62 . -1) 150) nil (25241 27494 917750 835000) 0 nil])
([nil nil ((148 . 150)) nil (25241 27494 917742 452000) 0 nil])
([nil nil ((147 . 167) (#("img" 0 3 (fontified t)) . -147) (undo-tree-id60 . -3) 150) nil (25241 27494 917739 544000) 0 nil])
([nil nil ((#("    <img alt=\"\" src=\"\"/>
" 0 4 (fontified t) 4 5 (fontified t) 5 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t) 13 15 (fontified t face font-lock-string-face) 15 16 (fontified t) 16 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t) 20 22 (fontified t face font-lock-string-face) 22 24 (fontified t) 24 25 (fontified t)) . 143) (undo-tree-id45 . -4) (undo-tree-id46 . -24) (undo-tree-id47 . -25) (undo-tree-id48 . 2) (undo-tree-id49 . -24) (undo-tree-id50 . 21) (undo-tree-id51 . -5) (undo-tree-id52 . -4) (undo-tree-id53 . -24) (undo-tree-id54 . -23) (undo-tree-id55 . -24) (undo-tree-id56 . -22) (undo-tree-id57 . -23) (undo-tree-id58 . -21) (undo-tree-id59 . -22) 167) nil (25241 27494 917731 955000) 0 nil])
([nil nil ((142 . 147) 118) nil (25241 27494 917698 941000) 0 nil])
([nil nil ((147 . 150)) nil (25241 27494 917696 278000) 0 nil])
([nil nil ((147 . 167) (#("img" 0 3 (fontified t)) . -147) (undo-tree-id44 . -3) 150) nil (25241 27494 918277 316000) 0 nil])
([nil nil ((167 . 169)) nil (25241 27506 715610 987000) 0 nil] [nil nil ((nil rear-nonsticky nil 191 . 192) (nil fontified nil 191 . 192) (nil fontified nil 189 . 191) (nil fontified nil 187 . 189) (nil fontified nil 186 . 187) (nil fontified nil 183 . 186) (nil fontified nil 182 . 183) (nil fontified nil 180 . 182) (nil fontified nil 179 . 180) (nil fontified nil 176 . 179) (nil fontified nil 175 . 176) (nil fontified nil 172 . 175) (nil fontified nil 171 . 172) (nil fontified nil 167 . 171) (167 . 192)) ((#("    <img alt=\"\" src=\"\"/>
" 0 4 (fontified nil) 4 5 (fontified nil) 5 8 (fontified nil face font-lock-function-name-face) 8 9 (fontified nil) 9 12 (fontified nil face font-lock-variable-name-face) 12 13 (fontified nil) 13 15 (fontified nil face font-lock-string-face) 15 16 (fontified nil) 16 19 (fontified nil face font-lock-variable-name-face) 19 20 (fontified nil) 20 22 (fontified nil face font-lock-string-face) 22 24 (fontified nil) 24 25 (fontified nil rear-nonsticky nil)) . 167) (undo-tree-id63 . -25) (undo-tree-id64 . -25) (undo-tree-id65 . -25) (undo-tree-id66 . -25) (undo-tree-id67 . -24) (undo-tree-id68 . -25) (nil rear-nonsticky t 191 . 192)) (25241 27494 917669 893000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -167) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("m" 0 1 (fontified t)) . -168) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 169) nil (25241 27597 805501 239000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 311 . 312) (nil fontified nil 164 . 312) (164 . 312)) nil (25241 27605 903963 560000) 0 nil] [nil nil ((nil rear-nonsticky nil 188 . 189) (nil fontified nil 188 . 189) (nil fontified nil 186 . 188) (nil fontified nil 184 . 186) (nil fontified nil 183 . 184) (nil fontified nil 180 . 183) (nil fontified nil 179 . 180) (nil fontified nil 177 . 179) (nil fontified nil 176 . 177) (nil fontified nil 173 . 176) (nil fontified nil 172 . 173) (nil fontified nil 169 . 172) (nil fontified nil 168 . 169) (nil fontified nil 164 . 168) (164 . 189)) ((#("    <img alt=\"\" src=\"\"/>
" 0 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face) 5 8 (fontified nil face font-lock-string-face) 8 9 (fontified nil face font-lock-string-face) 9 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-string-face) 14 15 (fontified nil face font-lock-string-face) 15 16 (fontified nil face font-lock-string-face) 16 19 (fontified nil face font-lock-string-face) 19 20 (fontified nil face font-lock-string-face) 20 21 (fontified nil face font-lock-string-face) 21 22 (fontified nil face font-lock-string-face) 22 24 (fontified nil face font-lock-string-face) 24 25 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 164) (undo-tree-id103 . -25) (undo-tree-id104 . -25) (undo-tree-id105 . -25) (undo-tree-id106 . -25) (undo-tree-id107 . -24) (undo-tree-id108 . -25) (nil rear-nonsticky t 188 . 189)) (25241 27597 805266 974000) 0 nil] [nil nil ((nil rear-nonsticky nil 188 . 189) (nil fontified nil 188 . 189) (nil fontified nil 186 . 188) (nil fontified nil 184 . 186) (nil fontified nil 183 . 184) (nil fontified nil 180 . 183) (nil fontified nil 179 . 180) (nil fontified nil 177 . 179) (nil fontified nil 176 . 177) (nil fontified nil 173 . 176) (nil fontified nil 172 . 173) (nil fontified nil 169 . 172) (nil fontified nil 168 . 169) (nil fontified nil 164 . 168) (164 . 189)) ((#("    <img alt=\"\" src=\"\"/>
" 0 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face) 5 8 (fontified nil face font-lock-string-face) 8 9 (fontified nil face font-lock-string-face) 9 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-string-face) 14 15 (fontified nil face font-lock-string-face) 15 16 (fontified nil face font-lock-string-face) 16 19 (fontified nil face font-lock-string-face) 19 20 (fontified nil face font-lock-string-face) 20 21 (fontified nil face font-lock-string-face) 21 22 (fontified nil face font-lock-string-face) 22 24 (fontified nil face font-lock-string-face) 24 25 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 164) (undo-tree-id97 . -25) (undo-tree-id98 . -25) (undo-tree-id99 . -25) (undo-tree-id100 . -25) (undo-tree-id101 . -24) (undo-tree-id102 . -25) (nil rear-nonsticky t 188 . 189)) (25241 27506 714514 773000) 0 nil])
([nil nil ((315 . 320) 312 (t 25241 27605 900233 175000)) nil (25241 27883 431760 686000) 0 nil])
nil
nil
([nil nil ((320 . 322)) nil (25241 27883 431759 46000) 0 nil])
([nil nil ((#("<" 0 1 (fontified nil)) . -320) (undo-tree-id142 . -1) (#(">" 0 1 (fontified t)) . 321)) nil (25241 27883 431757 598000) 0 nil])
([nil nil ((320 . 322)) nil (25241 27883 431755 195000) 0 nil])
([nil nil ((320 . 329) (#("h2" 0 2 (fontified t)) . -320) (undo-tree-id141 . -2) 322) nil (25241 27883 431753 849000) 0 nil])
([nil nil ((324 . 337)) nil (25241 27883 431751 414000) 0 nil])
([nil nil ((342 . 347)) nil (25241 27883 431750 390000) 0 nil])
([nil nil ((347 . 348)) nil (25241 27883 431749 443000) 0 nil])
([nil nil ((347 . 354) (#("p" 0 1 (fontified t)) . -347) (undo-tree-id140 . -1) 348) nil (25241 27883 431748 130000) 0 nil])
([nil nil ((350 . 351)) nil (25241 27883 431745 789000) 0 nil])
([nil nil ((#("Description" 0 11 (fontified t face (bold-italic underline))) . -325)) nil (25241 27883 431744 487000) 0 nil])
([nil nil ((325 . 333)) nil (25241 27883 431743 501000) 0 nil])
([nil nil ((#("    <p> </p>" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 10 (fontified t) 10 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t)) . -340) (undo-tree-id134 . -12) (undo-tree-id135 . 1) (undo-tree-id136 . -12) (undo-tree-id137 . 4) (undo-tree-id138 . -9) (undo-tree-id139 . -12) 352) nil (25241 27883 431741 658000) 0 nil])
([nil nil ((340 . 344)) nil (25241 27883 431734 936000) 0 nil])
([nil nil ((346 . 349) (#(">" 0 1 (fontified nil syntax-table (1))) . -346) (344 . 347)) nil (25241 27883 431733 615000) 0 nil])
([nil nil ((#("li" 0 2 (fontified t)) . -347) (undo-tree-id133 . -2) 349) nil (25241 27883 431731 660000) 0 nil])
([nil nil ((#("ol>" 0 2 (fontified t) 2 3 (fontified t syntax-table (1))) . -344) (undo-tree-id132 . -3) 347) nil (25241 27883 431729 61000) 0 nil])
([nil nil ((346 . 349) (#(">" 0 1 (fontified nil syntax-table (1))) . -346) (344 . 347)) nil (25241 27883 431726 685000) 0 nil])
([nil nil ((349 . 351)) nil (25241 27883 431725 10000) 0 nil])
([nil nil ((445 . 449) (433 . 435) (417 . 419) (401 . 403) (385 . 387) (369 . 371) (353 . 355) (344 . 438) (#("ul>li*6" 0 2 (fontified t) 2 3 (fontified t syntax-table (1)) 3 7 (fontified t)) . -344) (undo-tree-id131 . -7) 351) nil (25241 27883 431723 132000) 0 nil])
([nil nil ((359 . 360)) nil (25241 27883 431719 236000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -359) (undo-tree-id130 . -1) 360) nil (25241 27883 431717 666000) 0 nil])
([nil nil ((359 . 360)) nil (25241 27883 431715 413000) 0 nil])
([nil nil ((348 . 349)) nil (25241 27883 431714 209000) 0 nil])
([nil nil ((nil rear-nonsticky nil 353 . 354) (nil fontified nil 352 . 354) (nil fontified nil 351 . 352) (nil fontified nil 349 . 351) (349 . 354)) nil (25241 27883 431712 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 459 . 460) (nil fontified nil 354 . 460) (354 . 460)) nil (25241 27883 431710 637000) 0 nil])
([nil nil ((#("ol>li
" 0 2 (fontified t) 2 3 (fontified t syntax-table (1)) 3 4 (fontified t) 4 5 (fontified t rear-nonsticky t) 5 6 (fontified t)) . 349) (undo-tree-id126 . -5) (undo-tree-id127 . -6) (undo-tree-id128 . -5) (undo-tree-id129 . -5) 354) nil (25241 27883 431708 556000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 354) (undo-tree-id125 . -1)) nil (25241 27883 431703 205000) 0 nil])
([nil nil ((354 . 355)) nil (25241 27883 431701 437000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 368) (undo-tree-id124 . -1)) nil (25241 27883 431700 71000) 0 nil])
([nil nil ((368 . 369)) nil (25241 27883 431698 68000) 0 nil])
([nil nil ((385 . 386)) nil (25241 27883 431696 880000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 385) (undo-tree-id123 . -1) 386) nil (25241 27883 431695 254000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 385) (undo-tree-id122 . -1)) nil (25241 27883 431692 318000) 0 nil])
([nil nil ((385 . 386)) nil (25241 27883 431689 829000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 400) (undo-tree-id121 . -1)) nil (25241 27883 431688 267000) 0 nil])
([nil nil ((400 . 401)) nil (25241 27883 431685 871000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 423) (undo-tree-id120 . -1)) nil (25241 27883 431684 620000) 0 nil])
([nil nil ((423 . 424)) nil (25241 27883 431682 603000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 433) (undo-tree-id119 . -1)) nil (25241 27883 431681 310000) 0 nil])
([nil nil ((433 . 434)) nil (25241 27883 431679 238000) 0 nil])
([nil nil ((#("prep: 25 mins
" 0 5 (fontified t) 5 6 (fontified t) 6 14 (fontified t)) . 349) (undo-tree-id110 . -14) (undo-tree-id111 . -13) (undo-tree-id112 . -13) (undo-tree-id113 . -12) (undo-tree-id114 . -13) (undo-tree-id115 . -11) (undo-tree-id116 . -12) (undo-tree-id117 . -10) (undo-tree-id118 . -11) 362) nil (25241 27883 431676 848000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 440) (undo-tree-id109 . -1)) nil (25241 27883 431842 813000) 0 nil])
([nil nil ((nil rear-nonsticky nil 463 . 464) (nil fontified nil 456 . 464) (nil fontified nil 455 . 456) (nil fontified nil 450 . 455) (450 . 464)) nil (25241 27901 902808 887000) 0 nil] [nil nil ((450 . 451)) ((#("
" 0 1 (fontified t)) . 450) (undo-tree-id143 . -1)) (25241 27883 431651 22000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 464)) nil (25241 27901 902806 676000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 463) (undo-tree-id155 . -1)) nil (25241 27901 902805 505000) 0 nil])
([nil nil ((#("cook: 1 hr
" 0 5 (fontified t) 5 6 (fontified t) 6 11 (fontified t)) . 349) (undo-tree-id146 . -11) (undo-tree-id147 . -10) (undo-tree-id148 . -10) (undo-tree-id149 . -9) (undo-tree-id150 . -10) (undo-tree-id151 . -8) (undo-tree-id152 . -9) (undo-tree-id153 . -7) (undo-tree-id154 . -8) 359) nil (25241 27901 902802 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 478 . 479) (nil fontified nil 474 . 479) (nil fontified nil 473 . 474) (nil fontified nil 468 . 473) (468 . 479)) nil (25241 27901 902918 351000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 478) (undo-tree-id178 . -1)) nil (25241 27964 787391 847000) 0 nil] [nil nil ((#("<" 0 1 (fontified t)) . 479) (undo-tree-id144 . 1) (undo-tree-id145 . -1)) ((479 . 480)) (25241 27901 902786 797000) 0 nil])
([nil nil ((#("additional: 15 mins
" 0 11 (fontified t) 11 12 (fontified t) 12 20 (fontified t)) . 349) (undo-tree-id175 . -20) (undo-tree-id176 . -19) (undo-tree-id177 . -19) 368) nil (25241 27964 787387 646000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 493 . 494) (nil fontified nil 486 . 494) (nil fontified nil 485 . 486) (nil fontified nil 474 . 485) (474 . 494)) nil (25241 27964 787379 999000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 493) (undo-tree-id174 . -1)) nil (25241 27964 787375 975000) 0 nil])
([nil nil ((#("total: 1 hr 40 mins
" 0 6 (fontified t) 6 7 (fontified t) 7 20 (fontified t)) . 349) (undo-tree-id171 . -20) (undo-tree-id172 . -19) (undo-tree-id173 . -19) 368) nil (25241 27964 787371 615000) 0 nil])
([nil nil ((nil rear-nonsticky nil 508 . 509) (nil fontified nil 496 . 509) (nil fontified nil 495 . 496) (nil fontified nil 489 . 495) (489 . 509)) nil (25241 27964 787363 619000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 508) (undo-tree-id170 . -1)) nil (25241 27964 787359 249000) 0 nil])
([nil nil ((#("Servings: 12
" 0 9 (fontified t) 9 10 (fontified t) 10 13 (fontified t)) . 349) (undo-tree-id167 . -13) (undo-tree-id168 . -12) (undo-tree-id169 . -12) 361) nil (25241 27964 787354 194000) 0 nil])
([nil nil ((nil rear-nonsticky nil 523 . 524) (nil fontified nil 521 . 524) (nil fontified nil 520 . 521) (nil fontified nil 511 . 520) (511 . 524)) nil (25241 27964 787346 233000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 523) (undo-tree-id166 . -1)) nil (25241 27964 787341 941000) 0 nil])
([nil nil ((#("Yield: 1 9x13-inch lasagna
" 0 6 (fontified t) 6 7 (fontified t) 7 26 (fontified t) 26 27 (rear-nonsticky t fontified t)) . 349) (undo-tree-id157 . -27) (undo-tree-id158 . -26) (undo-tree-id159 . -26) (undo-tree-id160 . -25) (undo-tree-id161 . -26) (undo-tree-id162 . -24) (undo-tree-id163 . -25) (undo-tree-id164 . -23) (undo-tree-id165 . -24) 375) nil (25241 27964 787337 14000) 0 nil])
([nil nil ((nil fontified nil 538 . 539) (nil fontified nil 519 . 538) (nil fontified nil 518 . 519) (nil fontified nil 512 . 518) (512 . 539)) nil (25241 27964 787320 221000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 538) (undo-tree-id156 . -1)) nil (25241 27964 787317 903000) 0 nil])
([nil nil ((359 . 363) (#("prep" 0 4 (fontified t)) . 359)) nil (25241 27964 787308 694000) 0 nil])
([nil nil ((388 . 392) (#("cook" 0 4 (fontified t)) . 388)) nil (25241 27964 787307 105000) 0 nil])
([nil nil ((414 . 424) (#("additional" 0 10 (fontified t)) . 414)) nil (25241 27964 787304 531000) 0 nil])
([nil nil ((449 . 454) (#("total" 0 5 (fontified t)) . 449)) nil (25241 28027 470382 998000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 14) (517 . 518) (apply deactivate-cursor-after-undo 14) (apply activate-cursor-for-undo 13) (488 . 489) (apply deactivate-cursor-after-undo 13) (apply activate-cursor-for-undo 12) (452 . 453) (apply deactivate-cursor-after-undo 12) (apply activate-cursor-for-undo 11) (416 . 417) (apply deactivate-cursor-after-undo 11) (apply activate-cursor-for-undo 10) (389 . 390) (apply deactivate-cursor-after-undo 10) (359 . 360) (t 25241 28028 810243 50000)) nil (25241 28410 840887 744000) 0 nil] [nil nil ((359 . 361) (t 25241 27964 790241 555000)) ((#("br" 0 2 (fontified t)) . 359) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2)) (25241 28026 728079 195000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 10) (395 . 402) (#("b" 0 1 (fontified t)) . -395) (apply deactivate-cursor-after-undo 10) (apply activate-cursor-for-undo 11) (422 . 429) (#("b" 0 1 (fontified t)) . -422) (apply deactivate-cursor-after-undo 11) (apply activate-cursor-for-undo 12) (458 . 465) (#("b" 0 1 (fontified t)) . -458) (apply deactivate-cursor-after-undo 12) (apply activate-cursor-for-undo 13) (494 . 501) (#("b" 0 1 (fontified t)) . -494) (apply deactivate-cursor-after-undo 13) (apply activate-cursor-for-undo 14) (523 . 530) (#("b" 0 1 (fontified t)) . -523) (apply deactivate-cursor-after-undo 14) (359 . 366) (#("b" 0 1 (fontified t)) . -359) (undo-tree-id502 . -1) 360) nil (25241 28410 840880 612000) 0 nil])
([nil nil ((359 . 364) (#("br" 0 2 (fontified t)) . -359) (undo-tree-id185 . -2) 361) ((359 . 361) (#("<br/>" 0 1 (fontified t) 1 3 (fontified t face font-lock-function-name-face) 3 5 (fontified t)) . 359) (undo-tree-id300 . -3) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -5) (undo-tree-id304 . -5) (undo-tree-id305 . -5) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -5) (undo-tree-id431 . -3) (undo-tree-id432 . -5) (undo-tree-id433 . -5) (undo-tree-id434 . -5) (undo-tree-id435 . -5) (undo-tree-id436 . 1) (undo-tree-id437 . -5) (undo-tree-id438 . 5) (undo-tree-id439 . -1) (undo-tree-id440 . -5) (undo-tree-id441 . -5)) (25241 28026 332861 837000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 14) (#("Yield" 0 5 (fontified t)) . 523) (undo-tree-id495 . -5) (apply deactivate-cursor-after-undo 14) (apply activate-cursor-for-undo 13) (#("Servings" 0 8 (fontified t)) . 496) (undo-tree-id496 . -8) (apply deactivate-cursor-after-undo 13) (apply activate-cursor-for-undo 12) (#("Total" 0 5 (fontified t)) . 459) (undo-tree-id497 . -5) (apply deactivate-cursor-after-undo 12) (apply activate-cursor-for-undo 11) (#("Additional" 0 10 (fontified t)) . 427) (undo-tree-id498 . -10) (apply deactivate-cursor-after-undo 11) (apply activate-cursor-for-undo 10) (#("Cook" 0 4 (fontified t)) . 398) (undo-tree-id499 . -4) (apply deactivate-cursor-after-undo 10) (#("Prep" 0 4 (fontified t)) . 366) (undo-tree-id500 . -4) (undo-tree-id501 . -4)) nil (25241 28410 840871 134000) 0 nil])
([nil nil ((#("Prep" 0 4 (fontified t)) . 364) (undo-tree-id179 . -4) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -4) (undo-tree-id184 . -4)) ((364 . 368)) (25241 28025 973481 35000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 14) (nil rear-nonsticky nil 554 . 555) (nil fontified nil 550 . 555) (550 . 555) (apply deactivate-cursor-after-undo 14) (apply activate-cursor-for-undo 13) (nil rear-nonsticky nil 522 . 523) (nil fontified nil 515 . 523) (515 . 523) (apply deactivate-cursor-after-undo 13) (apply activate-cursor-for-undo 12) (nil rear-nonsticky nil 477 . 478) (nil fontified nil 473 . 478) (473 . 478) (apply deactivate-cursor-after-undo 12) (apply activate-cursor-for-undo 11) (nil rear-nonsticky nil 440 . 441) (nil fontified nil 431 . 441) (431 . 441) (apply deactivate-cursor-after-undo 11) (apply activate-cursor-for-undo 10) (nil rear-nonsticky nil 401 . 402) (nil fontified nil 398 . 402) (398 . 402) (apply deactivate-cursor-after-undo 10) (nil rear-nonsticky nil 365 . 366) (nil fontified nil 362 . 366) (362 . 366)) nil (25241 28410 840858 290000) 0 nil])
([nil nil ((nil rear-nonsticky nil 365 . 366) (nil fontified nil 362 . 366) (362 . 366)) ((#("Prep" 0 3 (fontified nil face font-lock-function-name-face) 3 4 (fontified nil rear-nonsticky nil face font-lock-function-name-face)) . 362) (undo-tree-id298 . -3) (undo-tree-id299 . -4) (nil rear-nonsticky t 365 . 366)) (25241 28025 427110 883000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 370)) nil (25241 28410 840850 793000) 0 nil])
([nil nil ((362 . 363)) ((#(" " 0 1 (fontified t)) . 362) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (t 25241 28016 730242 768000)) (25241 28016 720912 211000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 405)) nil (25241 28410 840849 639000) 0 nil])
nil
([nil nil ((#(":" 0 1 (fontified t)) . 443)) nil (25241 28410 840848 516000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 479)) nil (25241 28410 840847 535000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 523)) nil (25241 28410 840846 421000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 554)) nil (25241 28410 840845 203000) 0 nil])
([nil nil ((550 . 551)) nil (25241 28410 840843 981000) 0 nil])
([nil nil ((519 . 520)) nil (25241 28414 433487 805000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 33) (478 . 479) (apply deactivate-cursor-after-undo 33) (apply activate-cursor-for-undo 32) (441 . 442) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 31) (402 . 403) (apply deactivate-cursor-after-undo 31) (366 . 367)) nil (25241 28476 18941 323000) 0 nil] [nil nil ((#("Prep" 0 3 (fontified t face (bold)) 3 4 (fontified t rear-nonsticky t face (bold))) . -362) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4)) ((362 . 366)) (25241 28410 841265 532000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 33) (#(";" 0 1 (fontified t face (bold))) . -475) (undo-tree-id505 . -1) (apply deactivate-cursor-after-undo 33) (apply activate-cursor-for-undo 32) (#(";" 0 1 (fontified t face (bold))) . -439) (undo-tree-id506 . -1) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 31) (#(";" 0 1 (fontified t face (bold))) . -401) (undo-tree-id507 . -1) (apply deactivate-cursor-after-undo 31) (#(";" 0 1 (fontified t face (bold))) . -366) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) 367) nil (25241 28476 18929 582000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 27) (455 . 456) (#("Total" 0 4 (fontified t face (bold)) 4 5 (rear-nonsticky t fontified t face (bold))) . -455) (undo-tree-id453 . -5) (apply deactivate-cursor-after-undo 27) (apply activate-cursor-for-undo 26) (423 . 424) (#("Additional" 0 9 (fontified t face (bold)) 9 10 (rear-nonsticky t fontified t face (bold))) . -423) (undo-tree-id454 . -10) (apply deactivate-cursor-after-undo 26) (apply activate-cursor-for-undo 25) (394 . 395) (#("Cook" 0 3 (fontified t face (bold)) 3 4 (fontified t rear-nonsticky t face (bold))) . -394) (undo-tree-id455 . -4) (apply deactivate-cursor-after-undo 25) (362 . 363)) ((#("g" 0 1 (fontified t face (bold))) . 362) (undo-tree-id503 . -1) (394 . 398) (#("g" 0 1 (fontified t face (bold))) . 394) (423 . 433) (#("g" 0 1 (fontified t face (bold))) . 423) (455 . 460) (#("g" 0 1 (fontified t face (bold))) . 455) (undo-tree-id504 . -1)) (25241 28410 840794 386000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 31) (402 . 403) (apply deactivate-cursor-after-undo 31) (apply activate-cursor-for-undo 32) (440 . 441) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 33) (476 . 477) (apply deactivate-cursor-after-undo 33) (366 . 367)) nil (25241 28476 18867 964000) 0 nil])
nil
([nil nil ((595 . 600) (t 25241 28476 30253 493000)) nil (25241 28580 182076 401000) 0 nil])
([nil nil ((600 . 602)) nil (25241 28580 182074 900000) 0 nil])
([nil nil ((600 . 609) (#("h3" 0 2 (fontified t)) . -600) (undo-tree-id532 . -2) 602) nil (25241 28580 182073 329000) 0 nil])
([nil nil ((604 . 617)) nil (25241 28580 182070 370000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face (italic underline))) . -609) (undo-tree-id524 . -1) (#("d" 0 1 (fontified t face (italic underline))) . -610) (undo-tree-id525 . -1) (#("i" 0 1 (fontified t face (italic underline))) . -611) (undo-tree-id526 . -1) (#("e" 0 1 (fontified t face (italic underline))) . -612) (undo-tree-id527 . -1) (#("n" 0 1 (fontified t face (italic underline))) . -613) (undo-tree-id528 . -1) (#("t" 0 1 (fontified t face (italic underline))) . -614) (undo-tree-id529 . -1) (#("s" 0 1 (fontified t face (italic underline))) . -615) (undo-tree-id530 . -1) (#(" " 0 1 (fontified t face (italic underline))) . -616) (undo-tree-id531 . -1) 617) nil (25241 28580 182064 813000) 0 nil])
([nil nil ((609 . 617)) nil (25241 28839 913774 354000) 0 nil])
([nil nil ((622 . 623) (622 . 623) (t 25241 28580 180255 925000)) nil (25241 29069 107971 561000) 0 nil] [nil nil ((apply -9 537 595 undo--wrap-and-run-primitive-undo 537 595 ((590 . 594) (543 . 548) 585)) (t 25241 28580 180255 925000)) ((apply 9 537 586 undo--wrap-and-run-primitive-undo 537 586 ((#("<!-- " 0 1 (fontified t syntax-table (2097163) face font-lock-comment-delimiter-face) 1 5 (fontified t face font-lock-comment-delimiter-face)) . 543) (#(" -->" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 4 (fontified t syntax-table (2097164) face font-lock-comment-delimiter-face)) . 590) 631))) (25241 28839 912848 638000) 0 nil])
([nil nil ((623 . 627)) nil (25241 29069 107970 17000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 859 . 860) (nil fontified nil 627 . 860) (627 . 860)) nil (25241 29069 107968 788000) 0 nil])
([nil nil ((862 . 866) (826 . 830) (787 . 791) (760 . 764) (723 . 727) (694 . 698) (665 . 669) 860) nil (25241 29069 107966 813000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -627) 664) nil (25241 29069 107963 900000) 0 nil])
([nil nil ((622 . 627) 600) nil (25241 29069 107962 625000) 0 nil])
([nil nil ((627 . 629)) nil (25241 29069 107961 153000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -627) (undo-tree-id562 . -1) (#("l" 0 1 (fontified t)) . -628) (undo-tree-id563 . -1) 629) nil (25241 29069 107959 597000) 0 nil])
([nil nil ((627 . 629)) nil (25241 29069 107956 208000) 0 nil])
([nil nil ((629 . 630)) nil (25241 29069 107955 144000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -628) (undo-tree-id560 . -1) (#("	" 0 1 (fontified t)) . -629) (undo-tree-id561 . -1) 630) nil (25241 29069 107953 669000) 0 nil])
([nil nil ((628 . 629)) nil (25241 29069 107950 512000) 0 nil])
([nil nil ((627 . 636) (#("ul" 0 2 (fontified t)) . -627) (undo-tree-id559 . -2) 629) nil (25241 29069 107948 992000) 0 nil])
([nil nil ((632 . 638) (633 . 637) (#("      " 0 6 (fontified nil)) . 632) (632 . 638) (631 . 633)) nil (25241 29069 107946 37000) 0 nil])
([nil nil ((653 . 654)) nil (25241 29069 107943 951000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -653) (undo-tree-id558 . -1) 654) nil (25241 29069 107942 355000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 41) (906 . 907) (apply deactivate-cursor-after-undo 41) (apply activate-cursor-for-undo 40) (868 . 869) (apply deactivate-cursor-after-undo 40) (apply activate-cursor-for-undo 39) (827 . 828) (apply deactivate-cursor-after-undo 39) (apply activate-cursor-for-undo 38) (798 . 799) (apply deactivate-cursor-after-undo 38) (apply activate-cursor-for-undo 37) (759 . 760) (apply deactivate-cursor-after-undo 37) (apply activate-cursor-for-undo 36) (728 . 729) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 35) (697 . 698) (apply deactivate-cursor-after-undo 35) (654 . 655) (apply activate-cursor-for-undo 41) (898 . 899) (apply deactivate-cursor-after-undo 41) (apply activate-cursor-for-undo 40) (861 . 862) (apply deactivate-cursor-after-undo 40) (apply activate-cursor-for-undo 39) (821 . 822) (apply deactivate-cursor-after-undo 39) (apply activate-cursor-for-undo 38) (793 . 794) (apply deactivate-cursor-after-undo 38) (apply activate-cursor-for-undo 37) (755 . 756) (apply deactivate-cursor-after-undo 37) (apply activate-cursor-for-undo 36) (725 . 726) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 35) (695 . 696) (apply deactivate-cursor-after-undo 35) (653 . 654)) nil (25241 29069 107937 379000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 41) (954 . 963) (#("li" 0 2 (fontified t)) . -954) (apply deactivate-cursor-after-undo 41) (apply activate-cursor-for-undo 40) (909 . 918) (#("li" 0 2 (fontified t)) . -909) (apply deactivate-cursor-after-undo 40) (apply activate-cursor-for-undo 39) (861 . 870) (#("li" 0 2 (fontified t)) . -861) (apply deactivate-cursor-after-undo 39) (apply activate-cursor-for-undo 38) (825 . 834) (#("li" 0 2 (fontified t)) . -825) (apply deactivate-cursor-after-undo 38) (apply activate-cursor-for-undo 37) (779 . 788) (#("li" 0 2 (fontified t)) . -779) (apply deactivate-cursor-after-undo 37) (apply activate-cursor-for-undo 36) (741 . 750) (#("li" 0 2 (fontified t)) . -741) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 35) (703 . 712) (#("li" 0 2 (fontified t)) . -703) (apply deactivate-cursor-after-undo 35) (653 . 662) (#("li" 0 2 (fontified t)) . -653) (undo-tree-id557 . -2) 655) nil (25241 29069 107923 341000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 41) (#("1 pint ricotta cheese " 0 21 (fontified t) 21 22 (rear-nonsticky t fontified t)) . 760) (apply deactivate-cursor-after-undo 41) (apply activate-cursor-for-undo 40) (#("½ pound shredded Cheddar cheese" 0 31 (fontified t)) . 746) (apply deactivate-cursor-after-undo 40) (apply activate-cursor-for-undo 39) (#("½ pound shredded mozzarella cheese" 0 34 (fontified t)) . 732) (apply deactivate-cursor-after-undo 39) (apply activate-cursor-for-undo 38) (#("1 clove garlic, minced" 0 22 (fontified t)) . 718) (apply deactivate-cursor-after-undo 38) (apply activate-cursor-for-undo 37) (#("1 (16 ounce) jar spaghetti sauce" 0 32 (fontified t)) . 704) (apply deactivate-cursor-after-undo 37) (apply activate-cursor-for-undo 36) (#("salt and pepper to taste" 0 24 (fontified t)) . 690) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 35) (#("1 pound lean ground beef" 0 24 (fontified t)) . 676) (apply deactivate-cursor-after-undo 35) (#("1 (16 ounce) package lasagna noodles" 0 36 (fontified t)) . 662) (undo-tree-id555 . -36) (undo-tree-id556 . -36) 698) nil (25241 29069 107911 678000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 41) (nil fontified nil 979 . 980) (nil fontified nil 958 . 979) (958 . 980) (apply deactivate-cursor-after-undo 41) (apply activate-cursor-for-undo 40) (nil rear-nonsticky nil 943 . 944) (nil fontified nil 913 . 944) (913 . 944) (apply deactivate-cursor-after-undo 40) (apply activate-cursor-for-undo 39) (nil rear-nonsticky nil 898 . 899) (nil fontified nil 865 . 899) (865 . 899) (apply deactivate-cursor-after-undo 39) (apply activate-cursor-for-undo 38) (nil rear-nonsticky nil 850 . 851) (nil fontified nil 829 . 851) (829 . 851) (apply deactivate-cursor-after-undo 38) (apply activate-cursor-for-undo 37) (nil rear-nonsticky nil 814 . 815) (nil fontified nil 783 . 815) (783 . 815) (apply deactivate-cursor-after-undo 37) (apply activate-cursor-for-undo 36) (nil rear-nonsticky nil 768 . 769) (nil fontified nil 745 . 769) (745 . 769) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 35) (nil rear-nonsticky nil 730 . 731) (nil fontified nil 707 . 731) (707 . 731) (apply deactivate-cursor-after-undo 35) (nil rear-nonsticky nil 692 . 693) (nil fontified nil 657 . 693) (657 . 693)) nil (25241 29069 107900 514000) 0 nil])
([nil nil ((#("    <li>1 (16 ounce) package lasagna noodles</li>
    <li>1 pound lean ground beef</li>
    <li>salt and pepper to taste</li>
    <li>1 (16 ounce) jar spaghetti sauce</li>
    <li>1 clove garlic, minced</li>
    <li>½ pound shredded mozzarella cheese</li>
    <li>½ pound shredded Cheddar cheese</li>
    <li>1 pint ricotta cheese </li>
" 0 4 (fontified t) 4 5 (fontified t) 5 7 (fontified t face font-lock-function-name-face) 7 8 (fontified t) 8 43 (fontified t) 43 44 (fontified t rear-nonsticky t) 44 46 (fontified t) 46 48 (fontified t face font-lock-function-name-face) 48 49 (fontified t) 49 50 (fontified t) 50 54 (fontified t) 54 55 (fontified t) 55 57 (fontified t face font-lock-function-name-face) 57 58 (fontified t) 58 81 (fontified t) 81 82 (fontified t rear-nonsticky t) 82 84 (fontified t) 84 86 (fontified t face font-lock-function-name-face) 86 87 (fontified t) 87 88 (fontified t) 88 92 (fontified t) 92 93 (fontified t) 93 95 (fontified t face font-lock-function-name-face) 95 96 (fontified t) 96 119 (fontified t) 119 120 (fontified t rear-nonsticky t) 120 122 (fontified t) 122 124 (fontified t face font-lock-function-name-face) 124 125 (fontified t) 125 126 (fontified t) 126 130 (fontified t) 130 131 (fontified t) 131 133 (fontified t face font-lock-function-name-face) 133 134 (fontified t) 134 165 (fontified t) 165 166 (fontified t rear-nonsticky t) 166 168 (fontified t) 168 170 (fontified t face font-lock-function-name-face) 170 171 (fontified t) 171 172 (fontified t) 172 176 (fontified t) 176 177 (fontified t) 177 179 (fontified t face font-lock-function-name-face) 179 180 (fontified t) 180 201 (fontified t) 201 202 (fontified t rear-nonsticky t) 202 204 (fontified t) 204 206 (fontified t face font-lock-function-name-face) 206 207 (fontified t) 207 208 (fontified t) 208 212 (fontified t) 212 213 (fontified t) 213 215 (fontified t face font-lock-function-name-face) 215 216 (fontified t) 216 249 (fontified t) 249 250 (fontified t rear-nonsticky t) 250 252 (fontified t) 252 254 (fontified t face font-lock-function-name-face) 254 255 (fontified t) 255 256 (fontified t) 256 260 (fontified t) 260 261 (fontified t) 261 263 (fontified t face font-lock-function-name-face) 263 264 (fontified t) 264 294 (fontified t) 294 295 (fontified t rear-nonsticky t) 295 297 (fontified t) 297 299 (fontified t face font-lock-function-name-face) 299 300 (fontified t) 300 301 (fontified t) 301 305 (fontified t) 305 306 (fontified t) 306 308 (fontified t face font-lock-function-name-face) 308 309 (fontified t) 309 330 (fontified t) 330 331 (rear-nonsticky t fontified t) 331 333 (fontified t) 333 335 (fontified t face font-lock-function-name-face) 335 336 (fontified t) 336 337 (fontified t)) . 649) (undo-tree-id533 . -58) (undo-tree-id534 . -336) (undo-tree-id535 . -301) (undo-tree-id536 . -337) (undo-tree-id537 . -4) (undo-tree-id538 . -88) (undo-tree-id539 . -50) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -49) (undo-tree-id543 . -8) (undo-tree-id544 . -336) (undo-tree-id545 . 2) (undo-tree-id546 . -336) (undo-tree-id547 . 6) (undo-tree-id548 . -332) (undo-tree-id549 . -335) (undo-tree-id550 . -336) (undo-tree-id551 . -334) (undo-tree-id552 . -335) (undo-tree-id553 . -333) (undo-tree-id554 . -334) 985) nil (25241 29069 107888 483000) 0 nil])
([nil nil ((nil rear-nonsticky nil 968 . 969) (nil fontified nil 968 . 969) (nil fontified nil 967 . 968) (nil fontified nil 965 . 967) (nil fontified nil 963 . 965) (nil fontified nil 962 . 963) (nil fontified nil 941 . 962) (nil fontified nil 940 . 941) (nil fontified nil 938 . 940) (nil fontified nil 937 . 938) (nil fontified nil 933 . 937) (nil fontified nil 932 . 933) (nil fontified nil 931 . 932) (nil fontified nil 929 . 931) (nil fontified nil 927 . 929) (nil fontified nil 926 . 927) (nil fontified nil 896 . 926) (nil fontified nil 895 . 896) (nil fontified nil 893 . 895) (nil fontified nil 892 . 893) (nil fontified nil 888 . 892) (nil fontified nil 887 . 888) (nil fontified nil 886 . 887) (nil fontified nil 884 . 886) (nil fontified nil 882 . 884) (nil fontified nil 881 . 882) (nil fontified nil 848 . 881) (nil fontified nil 847 . 848) (nil fontified nil 845 . 847) (nil fontified nil 844 . 845) (nil fontified nil 840 . 844) (nil fontified nil 839 . 840) (nil fontified nil 838 . 839) (nil fontified nil 836 . 838) (nil fontified nil 834 . 836) (nil fontified nil 833 . 834) (nil fontified nil 812 . 833) (nil fontified nil 811 . 812) (nil fontified nil 809 . 811) (nil fontified nil 808 . 809) (nil fontified nil 804 . 808) (nil fontified nil 803 . 804) (nil fontified nil 802 . 803) (nil fontified nil 800 . 802) (nil fontified nil 798 . 800) (nil fontified nil 797 . 798) (nil fontified nil 766 . 797) (nil fontified nil 765 . 766) (nil fontified nil 763 . 765) (nil fontified nil 762 . 763) (nil fontified nil 758 . 762) (nil fontified nil 757 . 758) (nil fontified nil 756 . 757) (nil fontified nil 754 . 756) (nil fontified nil 752 . 754) (nil fontified nil 751 . 752) (nil fontified nil 728 . 751) (nil fontified nil 727 . 728) (nil fontified nil 725 . 727) (nil fontified nil 724 . 725) (nil fontified nil 720 . 724) (nil fontified nil 719 . 720) (nil fontified nil 718 . 719) (nil fontified nil 716 . 718) (nil fontified nil 714 . 716) (nil fontified nil 713 . 714) (nil fontified nil 690 . 713) (nil fontified nil 689 . 690) (nil fontified nil 687 . 689) (nil fontified nil 686 . 687) (nil fontified nil 682 . 686) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 678 . 680) (nil fontified nil 676 . 678) (nil fontified nil 675 . 676) (nil fontified nil 640 . 675) (nil fontified nil 639 . 640) (nil fontified nil 637 . 639) (nil fontified nil 636 . 637) (nil fontified nil 632 . 636) (632 . 969)) nil (25241 29069 107846 718000) 0 nil])
([nil nil ((951 . 953) (904 . 906) (854 . 856) (816 . 818) (768 . 770) (728 . 730) (688 . 690) (636 . 638) 975 (t 25241 29069 110267 341000)) nil (25241 29091 870065 644000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 991) (undo-tree-id564 . -1)) nil (25241 29091 870060 245000) 0 nil])
([nil nil ((#("      " 0 2 (fontified t) 2 6 (fontified t)) . -989) 1000) nil (25241 29091 870046 821000) 0 nil])
([nil nil ((995 . 999) (t 25241 29091 880267 873000)) nil (25241 29199 808616 488000) 0 nil])
([nil nil ((999 . 1001)) nil (25241 29199 808615 279000) 0 nil])
([nil nil ((999 . 1008) (#("h4" 0 2 (fontified t)) . -999) (undo-tree-id585 . -2) 1001) nil (25241 29199 808613 979000) 0 nil])
([nil nil ((1003 . 1015)) nil (25241 29199 808611 725000) 0 nil])
([nil nil ((1020 . 1025)) nil (25241 29260 745510 438000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 49) (nil rear-nonsticky nil 1028 . 1029) (nil fontified nil 1025 . 1029) (1025 . 1029) (apply deactivate-cursor-after-undo 49) (apply activate-cursor-for-undo 48) (nil rear-nonsticky nil 1028 . 1029) (nil fontified nil 1025 . 1029) (1025 . 1029) (apply deactivate-cursor-after-undo 48) (apply activate-cursor-for-undo 47) (nil rear-nonsticky nil 1028 . 1029) (nil fontified nil 1025 . 1029) (1025 . 1029) (apply deactivate-cursor-after-undo 47) (nil rear-nonsticky nil 1028 . 1029) (nil fontified nil 1025 . 1029) (1025 . 1029)) nil (25241 29345 397528 400000) 0 nil] [nil nil ((nil rear-nonsticky nil 1619 . 1620) (nil fontified nil 1025 . 1620) (1025 . 1620)) ((#(" Step 1

Bring a large pot of lightly salted water to a boil. Add pasta and cook for 8 to 10 minutes or until al dente; drain.
Step 2

Preheat oven to 350 degrees F (175 degrees C). In a large skillet over medium-high heat, brown beef and season with salt and pepper; drain. Stir in spaghetti sauce and garlic and simmer 5 minutes.
Step 3

In a medium bowl, combine mozzarella, Cheddar and ricotta; stir well. In 9x13 inch pan, alternate layers of noodles, meat mixture and cheese mixture until pan is filled.
Step 4

Bake in preheated oven for 30 minutes, or until cheese is melted and bubbly.
" 0 1 (fontified nil) 1 5 (fontified nil) 5 8 (fontified nil) 8 127 (fontified nil) 127 134 (fontified nil) 134 332 (fontified nil) 332 339 (fontified nil) 339 510 (fontified nil) 510 517 (fontified nil) 517 518 (fontified nil) 518 594 (fontified nil) 594 595 (rear-nonsticky nil fontified nil)) . 1025) (undo-tree-id773 . -5) (undo-tree-id774 . -1) (undo-tree-id775 . -8) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . 594) (undo-tree-id782 . -1) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -5) (undo-tree-id794 . -5) (undo-tree-id795 . -5) (undo-tree-id796 . -510) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -510) (undo-tree-id808 . -511) (undo-tree-id809 . -510) (undo-tree-id810 . -514) (undo-tree-id811 . -332) (undo-tree-id812 . -333) (undo-tree-id813 . -332) (undo-tree-id814 . -336) (undo-tree-id815 . -127) (undo-tree-id816 . -128) (undo-tree-id817 . -127) (undo-tree-id818 . -131) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -594) (undo-tree-id848 . -595) (undo-tree-id849 . -595) (nil fontified t 1542 . 1543) (nil fontified t 1535 . 1542) (nil fontified t 1364 . 1535) (nil fontified t 1357 . 1364) (nil fontified t 1159 . 1357) (nil fontified t 1152 . 1159) (nil fontified t 1033 . 1152) (nil fontified t 1030 . 1033) (nil fontified t 1026 . 1030) (nil fontified t 1025 . 1026) (nil rear-nonsticky t 1619 . 1620)) (25241 29260 374002 246000) 0 nil])
([nil nil ((#("    StepStepStepStep" 0 4 (fontified t) 4 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 11 (fontified t) 11 12 (fontified t rear-nonsticky t) 12 15 (fontified t) 15 16 (fontified t rear-nonsticky t) 16 19 (fontified t) 19 20 (fontified t rear-nonsticky t)) . 1021) (undo-tree-id1297 . -20) (undo-tree-id1298 . -4) (undo-tree-id1299 . -4) (undo-tree-id1300 . -4) (undo-tree-id1301 . -4) (undo-tree-id1302 . -20) (undo-tree-id1303 . -20) (undo-tree-id1304 . -20) (undo-tree-id1305 . -20) (undo-tree-id1306 . -20) (undo-tree-id1307 . -20) (undo-tree-id1308 . -20) (undo-tree-id1309 . -20) (undo-tree-id1310 . -20) (undo-tree-id1311 . -20) (undo-tree-id1312 . -20) (undo-tree-id1313 . -20) (undo-tree-id1314 . -20) (undo-tree-id1315 . -20) (undo-tree-id1316 . -20) (undo-tree-id1317 . -20) (undo-tree-id1318 . -20) (undo-tree-id1319 . -20)) ((1021 . 1041)) (25241 29346 873558 239000) 0 nil])
([nil nil ((1026 . 1029)) ((#("mmm" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1026) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3)) (25241 29259 663963 374000) 0 nil] [nil nil ((apply activate-cursor-for-undo 45) (1542 . 1543) (apply deactivate-cursor-after-undo 45) (apply activate-cursor-for-undo 44) (1362 . 1363) (apply deactivate-cursor-after-undo 44) (apply activate-cursor-for-undo 43) (1155 . 1156) (apply deactivate-cursor-after-undo 43) (1027 . 1028) (apply activate-cursor-for-undo 45) (1538 . 1539) (apply deactivate-cursor-after-undo 45) (apply activate-cursor-for-undo 44) (1359 . 1360) (apply deactivate-cursor-after-undo 44) (apply activate-cursor-for-undo 43) (1153 . 1154) (apply deactivate-cursor-after-undo 43) (1026 . 1027)) ((#("b" 0 1 (fontified nil)) . 1026) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("b" 0 1 (fontified nil)) . 1153) (undo-tree-id709 . -1) (#("b" 0 1 (fontified nil)) . 1359) (undo-tree-id710 . -1) (#("b" 0 1 (fontified nil)) . 1538) (undo-tree-id711 . -1) (#("r" 0 1 (fontified t)) . 1027) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("r" 0 1 (fontified t)) . 1155) (#("r" 0 1 (fontified t)) . 1362) (#("r" 0 1 (fontified t)) . 1542)) (25241 29205 403838 583000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1615 . 1616) (nil fontified nil 1021 . 1022) (nil fontified nil 1022 . 1028) (nil fontified nil 1028 . 1029) (nil fontified nil 1029 . 1148) (nil fontified nil 1148 . 1154) (nil fontified nil 1154 . 1155) (nil fontified nil 1155 . 1353) (nil fontified nil 1353 . 1359) (nil fontified nil 1359 . 1360) (nil fontified nil 1360 . 1531) (nil fontified nil 1531 . 1537) (nil fontified nil 1537 . 1538) (nil fontified nil 1538 . 1539) (1021 . 1616)) ((#(" Step 1

Bring a large pot of lightly salted water to a boil. Add pasta and cook for 8 to 10 minutes or until al dente; drain.
Step 2

Preheat oven to 350 degrees F (175 degrees C). In a large skillet over medium-high heat, brown beef and season with salt and pepper; drain. Stir in spaghetti sauce and garlic and simmer 5 minutes.
Step 3

In a medium bowl, combine mozzarella, Cheddar and ricotta; stir well. In 9x13 inch pan, alternate layers of noodles, meat mixture and cheese mixture until pan is filled.
Step 4

Bake in preheated oven for 30 minutes, or until cheese is melted and bubbly.
" 0 1 (fontified nil) 1 7 (fontified nil) 7 8 (fontified nil) 8 127 (fontified nil) 127 133 (fontified nil) 133 134 (fontified nil) 134 332 (fontified nil) 332 338 (fontified nil) 338 339 (fontified nil) 339 510 (fontified nil) 510 516 (fontified nil) 516 517 (fontified nil) 517 518 (fontified nil) 518 594 (fontified nil) 594 595 (rear-nonsticky nil fontified nil)) . 1021) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -8) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -5) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1169 . -1) (undo-tree-id1171 . -1) (undo-tree-id1173 . -1) (undo-tree-id1175 . -1) (undo-tree-id1177 . -1) (undo-tree-id1179 . -1) (undo-tree-id1181 . -1) (undo-tree-id1183 . -1) (undo-tree-id1185 . -1) (undo-tree-id1187 . -1) (undo-tree-id1189 . -1) (undo-tree-id1191 . -1) (undo-tree-id1193 . -1) (undo-tree-id1195 . -1) (undo-tree-id1197 . -1) (undo-tree-id1199 . -1) (undo-tree-id1201 . -1) (undo-tree-id1203 . -1) (undo-tree-id1205 . -1) (undo-tree-id1207 . -1) (undo-tree-id1209 . -1) (undo-tree-id1211 . -1) (undo-tree-id1213 . -1) (undo-tree-id1215 . -1) (undo-tree-id1217 . -1) (undo-tree-id1219 . -1) (undo-tree-id1221 . -1) (undo-tree-id1223 . -1) (undo-tree-id1225 . -1) (undo-tree-id1227 . -1) (undo-tree-id1229 . -1) (undo-tree-id1231 . -1) (undo-tree-id1233 . -1) (undo-tree-id1235 . -1) (undo-tree-id1237 . -1) (undo-tree-id1239 . -1) (undo-tree-id1241 . -1) (undo-tree-id1243 . -1) (undo-tree-id1245 . -1) (undo-tree-id1247 . -1) (undo-tree-id1249 . -1) (undo-tree-id1251 . -1) (undo-tree-id1253 . -1) (undo-tree-id1255 . -1) (undo-tree-id1257 . -1) (undo-tree-id1259 . -1) (undo-tree-id1261 . -1) (undo-tree-id1263 . -1) (undo-tree-id1265 . -1) (undo-tree-id1267 . -1) (undo-tree-id1269 . -1) (undo-tree-id1271 . -1) (undo-tree-id1273 . -1) (undo-tree-id1275 . -1) (undo-tree-id1277 . -1) (undo-tree-id1279 . -7) (undo-tree-id1281 . -7) (undo-tree-id1283 . -7) (undo-tree-id1285 . -1) (undo-tree-id1287 . -1) (undo-tree-id1289 . -511) (undo-tree-id1291 . -1) (undo-tree-id1293 . -1) (undo-tree-id1295 . -595) (nil fontified t 1538 . 1539) (nil fontified t 1537 . 1538) (nil fontified t 1531 . 1537) (nil fontified t 1360 . 1531) (nil fontified t 1359 . 1360) (nil fontified t 1353 . 1359) (nil fontified t 1155 . 1353) (nil fontified t 1154 . 1155) (nil fontified t 1148 . 1154) (nil fontified t 1029 . 1148) (nil fontified t 1028 . 1029) (nil fontified t 1022 . 1028) (nil fontified t 1021 . 1022) (nil rear-nonsticky t 1615 . 1616)) (25241 29347 237953 213000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1026) (undo-tree-id739 . -1) (#("m" 0 1 (fontified t)) . -1027) (undo-tree-id740 . -1) (#("m" 0 1 (fontified t)) . -1028) (undo-tree-id741 . -1) 1029) ((1026 . 1029)) (25241 29258 985284 67000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 45) (#("r" 0 1 (fontified t)) . -1539) (apply deactivate-cursor-after-undo 45) (apply activate-cursor-for-undo 44) (#("r" 0 1 (fontified t)) . -1360) (apply deactivate-cursor-after-undo 44) (apply activate-cursor-for-undo 43) (#("r" 0 1 (fontified t)) . -1154) (apply deactivate-cursor-after-undo 43) (#("r" 0 1 (fontified t)) . -1027) (undo-tree-id584 . -1) 1028) ((1027 . 1028) (1154 . 1155) (1360 . 1361) (1539 . 1540)) (25241 29204 574258 855000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 61) (1534 . 1535) (apply deactivate-cursor-after-undo 61) (apply activate-cursor-for-undo 60) (1355 . 1356) (apply deactivate-cursor-after-undo 60) (apply activate-cursor-for-undo 59) (1149 . 1150) (apply deactivate-cursor-after-undo 59) (1022 . 1023)) nil (25241 29407 650519 428000) 0 nil] [nil nil ((apply activate-cursor-for-undo 53) (1538 . 1539) (apply deactivate-cursor-after-undo 53) (apply activate-cursor-for-undo 52) (1358 . 1359) (apply deactivate-cursor-after-undo 52) (apply activate-cursor-for-undo 51) (1151 . 1152) (apply deactivate-cursor-after-undo 51) (1023 . 1024) (apply activate-cursor-for-undo 53) (1534 . 1535) (apply deactivate-cursor-after-undo 53) (apply activate-cursor-for-undo 52) (1355 . 1356) (apply deactivate-cursor-after-undo 52) (apply activate-cursor-for-undo 51) (1149 . 1150) (apply deactivate-cursor-after-undo 51) (1022 . 1023)) ((#("b" 0 1 (fontified nil)) . 1022) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("b" 0 1 (fontified nil)) . 1149) (undo-tree-id1140 . -1) (#("b" 0 1 (fontified nil)) . 1355) (undo-tree-id1141 . -1) (#("b" 0 1 (fontified nil)) . 1534) (undo-tree-id1142 . -1) (#("r" 0 1 (fontified t)) . 1023) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (#("r" 0 1 (fontified t)) . 1151) (#("r" 0 1 (fontified t)) . 1358) (#("r" 0 1 (fontified t)) . 1538)) (25241 29344 525216 794000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 49) (1538 . 1539) (apply deactivate-cursor-after-undo 49) (apply activate-cursor-for-undo 48) (1359 . 1360) (apply deactivate-cursor-after-undo 48) (apply activate-cursor-for-undo 47) (1153 . 1154) (apply deactivate-cursor-after-undo 47) (1026 . 1027)) ((#("b" 0 1 (fontified t)) . 1026) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("b" 0 1 (fontified t)) . 1153) (#("b" 0 1 (fontified t)) . 1359) (#("b" 0 1 (fontified t)) . 1538)) (25241 29258 556673 904000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 45) (1563 . 1567) (1563 . 1570) (#("b" 0 1 (fontified t)) . -1563) (apply deactivate-cursor-after-undo 45) (apply activate-cursor-for-undo 44) (1374 . 1378) (1374 . 1381) (#("b" 0 1 (fontified t)) . -1374) (apply deactivate-cursor-after-undo 44) (apply activate-cursor-for-undo 43) (1158 . 1162) (1158 . 1165) (#("b" 0 1 (fontified t)) . -1158) (apply deactivate-cursor-after-undo 43) (#(" " 0 1 (fontified nil)) . -1025) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (1026 . 1033) (#("b" 0 1 (fontified t)) . -1026) (undo-tree-id583 . -1) 1027) ((1026 . 1027) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 3 (fontified nil) 3 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1026) (undo-tree-id596 . -3) (undo-tree-id597 . -7) (undo-tree-id598 . -7) (undo-tree-id599 . -7) (undo-tree-id600 . -7) (undo-tree-id601 . 1) (undo-tree-id602 . -7) (undo-tree-id603 . 4) (undo-tree-id604 . -4) (undo-tree-id605 . -7) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -7) (undo-tree-id622 . -3) (undo-tree-id623 . -7) (undo-tree-id624 . -7) (undo-tree-id625 . -7) (undo-tree-id626 . -7) (undo-tree-id627 . -7) (undo-tree-id628 . -7) (undo-tree-id629 . -7) (undo-tree-id630 . -7) (undo-tree-id631 . -7) (undo-tree-id632 . -7) (undo-tree-id633 . -7) (undo-tree-id634 . -7) (undo-tree-id635 . -7) (undo-tree-id636 . -7) (undo-tree-id637 . -7) (undo-tree-id638 . -7) (undo-tree-id639 . -7) (undo-tree-id640 . -7) (undo-tree-id641 . -7) (undo-tree-id642 . -7) (undo-tree-id643 . -7) (undo-tree-id644 . -7) (undo-tree-id645 . -7) (undo-tree-id646 . -7) (undo-tree-id647 . -7) (undo-tree-id648 . -7) (undo-tree-id649 . -7) (undo-tree-id650 . -7) (undo-tree-id651 . -7) (undo-tree-id652 . -7) (undo-tree-id653 . -7) (undo-tree-id654 . -7) (undo-tree-id655 . -7) (undo-tree-id656 . -7) (undo-tree-id657 . -7) (undo-tree-id658 . -7) (undo-tree-id659 . -7) (undo-tree-id660 . -7) (undo-tree-id661 . -7) (undo-tree-id662 . -7) (undo-tree-id663 . -7) (undo-tree-id664 . -7) (undo-tree-id665 . -7) (undo-tree-id666 . -7) (undo-tree-id667 . -7) (undo-tree-id668 . -7) (1025 . 1026) (1158 . 1159) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 3 (fontified nil) 3 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1158) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -1) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 1158) (undo-tree-id674 . -3) (1374 . 1375) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 3 (fontified nil) 3 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1374) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -1) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 1374) (1563 . 1564) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 3 (fontified nil) 3 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1563) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -1) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 1563)) (25241 29200 660958 705000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 61) (1563 . 1567) (1563 . 1570) (#("b" 0 1 (fontified t)) . -1563) (apply deactivate-cursor-after-undo 61) (apply activate-cursor-for-undo 60) (1374 . 1378) (1374 . 1381) (#("b" 0 1 (fontified t)) . -1374) (apply deactivate-cursor-after-undo 60) (apply activate-cursor-for-undo 59) (1158 . 1162) (1158 . 1165) (#("b" 0 1 (fontified t)) . -1158) (apply deactivate-cursor-after-undo 59) (1022 . 1025) (1022 . 1029) (#("b" 0 1 (fontified t)) . -1022) (undo-tree-id1330 . -1) 1023) nil (25241 29407 650510 36000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 53) (1557 . 1561) (1557 . 1562) (#("br" 0 2 (fontified t)) . -1557) (apply deactivate-cursor-after-undo 53) (apply activate-cursor-for-undo 52) (1370 . 1374) (1370 . 1375) (#("br" 0 2 (fontified t)) . -1370) (apply deactivate-cursor-after-undo 52) (apply activate-cursor-for-undo 51) (1156 . 1160) (1156 . 1161) (#("br" 0 2 (fontified t)) . -1156) (apply deactivate-cursor-after-undo 51) (1022 . 1025) (1022 . 1027) (#("br" 0 2 (fontified t)) . -1022) (undo-tree-id853 . -2) 1024) ((1022 . 1024) (#("<br/>" 0 1 (fontified nil) 1 3 (fontified nil face font-lock-function-name-face) 3 4 (fontified nil) 4 5 (fontified nil)) . 1022) (undo-tree-id1006 . -3) (undo-tree-id1007 . -5) (undo-tree-id1008 . -5) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -3) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (undo-tree-id1034 . -3) (undo-tree-id1035 . -3) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -3) (undo-tree-id1040 . -3) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -3) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) (undo-tree-id1052 . -3) (undo-tree-id1053 . -3) (undo-tree-id1054 . -3) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) (undo-tree-id1064 . -3) (undo-tree-id1065 . -3) (undo-tree-id1066 . -3) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -3) (undo-tree-id1079 . -3) (undo-tree-id1080 . -3) (undo-tree-id1081 . -3) (undo-tree-id1082 . -3) (undo-tree-id1083 . -3) (undo-tree-id1084 . -3) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -3) (undo-tree-id1092 . -3) (undo-tree-id1093 . -3) (undo-tree-id1094 . -3) (undo-tree-id1095 . -3) (undo-tree-id1096 . -3) (undo-tree-id1097 . -3) (undo-tree-id1098 . -3) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -3) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) (undo-tree-id1109 . -3) (undo-tree-id1110 . -3) (undo-tree-id1111 . -3) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) (undo-tree-id1118 . -3) (undo-tree-id1119 . -4) (undo-tree-id1120 . -3) (undo-tree-id1121 . -4) (undo-tree-id1122 . -4) (undo-tree-id1123 . -4) (undo-tree-id1124 . -4) (undo-tree-id1125 . -4) (undo-tree-id1126 . -4) (undo-tree-id1127 . -5) (undo-tree-id1128 . -4) (undo-tree-id1129 . -1) (#("   " 0 3 (fontified t)) . 1022) (1156 . 1158) (#("<br/>" 0 1 (fontified nil) 1 3 (fontified nil face font-lock-function-name-face) 3 4 (fontified nil) 4 5 (fontified nil)) . 1156) (undo-tree-id1130 . -1) (#("    " 0 4 (fontified t)) . 1156) (1370 . 1372) (#("<br/>" 0 1 (fontified nil) 1 3 (fontified nil face font-lock-function-name-face) 3 4 (fontified nil) 4 5 (fontified nil)) . 1370) (undo-tree-id1131 . -1) (#("    " 0 4 (fontified t)) . 1370) (1557 . 1559) (#("<br/>" 0 1 (fontified nil) 1 3 (fontified nil face font-lock-function-name-face) 3 4 (fontified nil) 4 5 (fontified nil)) . 1557) (undo-tree-id1132 . -1) (#("    " 0 4 (fontified t)) . 1557)) (25241 29344 334766 571000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 49) (1563 . 1567) (1563 . 1570) (#("b" 0 1 (fontified t)) . -1563) (apply deactivate-cursor-after-undo 49) (apply activate-cursor-for-undo 48) (1374 . 1378) (1374 . 1381) (#("b" 0 1 (fontified t)) . -1374) (apply deactivate-cursor-after-undo 48) (apply activate-cursor-for-undo 47) (1158 . 1162) (1158 . 1165) (#("b" 0 1 (fontified t)) . -1158) (apply deactivate-cursor-after-undo 47) (#(" " 0 1 (fontified nil)) . -1025) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (1026 . 1033) (#("b" 0 1 (fontified t)) . -1026) (undo-tree-id738 . -1) 1027) ((1026 . 1027) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1026) (undo-tree-id742 . -7) (undo-tree-id743 . 1) (undo-tree-id744 . -7) (undo-tree-id745 . 4) (undo-tree-id746 . -4) (1025 . 1026) (1158 . 1159) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1158) (undo-tree-id747 . -1) (#("    " 0 4 (fontified t)) . 1158) (1374 . 1375) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1374) (undo-tree-id748 . -1) (#("    " 0 4 (fontified t)) . 1374) (1563 . 1564) (#("<b></b>" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-function-name-face) 6 7 (fontified nil)) . 1563) (undo-tree-id749 . -3) (undo-tree-id750 . -1) (#("    " 0 4 (fontified t)) . 1563)) (25241 29258 556129 51000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (#("</b>" 0 2 (fontified t) 2 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t)) . 1161) (undo-tree-id565 . -4) (apply deactivate-cursor-after-undo 43) (apply activate-cursor-for-undo 44) (#("</b>" 0 2 (fontified t) 2 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t)) . 1377) (undo-tree-id566 . -4) (apply deactivate-cursor-after-undo 44) (apply activate-cursor-for-undo 45) (#("</b>" 0 2 (fontified t) 2 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t)) . 1566) (undo-tree-id567 . -4) (apply deactivate-cursor-after-undo 45) (#("Step" 0 4 (fontified t)) . 1032) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . 4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4)) ((1032 . 1036) (1566 . 1570) (1377 . 1381) (1161 . 1165)) (25241 29199 809013 214000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 59) (#("Step 2" 0 6 (fontified t)) . 1163) (undo-tree-id1320 . -6) (apply deactivate-cursor-after-undo 59) (apply activate-cursor-for-undo 60) (#("Step 3" 0 6 (fontified t)) . 1379) (undo-tree-id1321 . -6) (apply deactivate-cursor-after-undo 60) (apply activate-cursor-for-undo 61) (#("Step 4" 0 6 (fontified t)) . 1568) (undo-tree-id1322 . -6) (apply deactivate-cursor-after-undo 61) (#("Step 1" 0 6 (fontified t)) . 1032) (undo-tree-id1323 . -6) (undo-tree-id1324 . -4) (undo-tree-id1325 . -4) (undo-tree-id1326 . -4) (undo-tree-id1327 . -4) (undo-tree-id1328 . -6) (undo-tree-id1329 . -6) 1038) nil (25241 29407 650493 835000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 53) (#("Step 4" 0 6 (fontified t)) . 1548) (apply deactivate-cursor-after-undo 53) (apply activate-cursor-for-undo 52) (#("Step 3" 0 6 (fontified t)) . 1367) (apply deactivate-cursor-after-undo 52) (apply activate-cursor-for-undo 51) (#("Step 2" 0 6 (fontified t)) . 1159) (apply deactivate-cursor-after-undo 51) (#("Step 1" 0 6 (fontified t)) . 1030) (undo-tree-id850 . -6) (undo-tree-id851 . -4) (undo-tree-id852 . -6) 1036) ((1030 . 1036) (1159 . 1165) (1367 . 1373) (1548 . 1554)) (25241 29344 220228 312000) 0 nil])
nil
([nil nil ((apply activate-cursor-for-undo 43) (nil rear-nonsticky nil 1164 . 1165) (nil fontified nil 1164 . 1165) (nil fontified nil 1163 . 1164) (nil fontified nil 1161 . 1163) (1161 . 1165) (apply deactivate-cursor-after-undo 43) (apply activate-cursor-for-undo 44) (nil rear-nonsticky nil 1376 . 1377) (nil fontified nil 1376 . 1377) (nil fontified nil 1375 . 1376) (nil fontified nil 1373 . 1375) (1373 . 1377) (apply deactivate-cursor-after-undo 44) (apply activate-cursor-for-undo 45) (nil rear-nonsticky nil 1561 . 1562) (nil fontified nil 1561 . 1562) (nil fontified nil 1560 . 1561) (nil fontified nil 1558 . 1560) (1558 . 1562) (apply deactivate-cursor-after-undo 45) (nil rear-nonsticky nil 1031 . 1032) (nil fontified nil 1028 . 1032) (1028 . 1032)) ((#("Step" 0 3 (fontified nil face (bold)) 3 4 (fontified nil rear-nonsticky nil face (bold))) . 1028) (undo-tree-id586 . -4) (undo-tree-id587 . -3) (undo-tree-id588 . -4) (nil rear-nonsticky t 1031 . 1032) (#("</b>" 0 2 (fontified nil) 2 3 (fontified nil face font-lock-function-name-face) 3 4 (rear-nonsticky nil fontified nil)) . 1558) (undo-tree-id589 . -3) (undo-tree-id590 . -4) (nil rear-nonsticky t 1561 . 1562) (#("</b>" 0 2 (fontified nil) 2 3 (fontified nil face font-lock-function-name-face) 3 4 (rear-nonsticky nil fontified nil)) . 1373) (undo-tree-id591 . -3) (undo-tree-id592 . -4) (nil rear-nonsticky t 1376 . 1377) (#("</b>" 0 2 (fontified nil) 2 3 (fontified nil face font-lock-function-name-face) 3 4 (rear-nonsticky nil fontified nil)) . 1161) (undo-tree-id593 . -4) (undo-tree-id594 . -3) (undo-tree-id595 . -4) (nil rear-nonsticky t 1164 . 1165)) (25241 29199 808552 345000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 61) (nil rear-nonsticky nil 1575 . 1576) (nil fontified nil 1570 . 1576) (1570 . 1576) (apply deactivate-cursor-after-undo 61) (apply activate-cursor-for-undo 60) (nil rear-nonsticky nil 1386 . 1387) (nil fontified nil 1381 . 1387) (1381 . 1387) (apply deactivate-cursor-after-undo 60) (apply activate-cursor-for-undo 59) (nil rear-nonsticky nil 1170 . 1171) (nil fontified nil 1165 . 1171) (1165 . 1171) (apply deactivate-cursor-after-undo 59) (nil rear-nonsticky nil 1033 . 1034) (nil fontified nil 1028 . 1034) (1028 . 1034)) nil (25241 29407 650451 88000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 53) (nil rear-nonsticky nil 1570 . 1571) (nil fontified nil 1565 . 1571) (1565 . 1571) (apply deactivate-cursor-after-undo 53) (apply activate-cursor-for-undo 52) (nil rear-nonsticky nil 1383 . 1384) (nil fontified nil 1378 . 1384) (1378 . 1384) (apply deactivate-cursor-after-undo 52) (apply activate-cursor-for-undo 51) (nil rear-nonsticky nil 1169 . 1170) (nil fontified nil 1164 . 1170) (1164 . 1170) (apply deactivate-cursor-after-undo 51) (nil rear-nonsticky nil 1034 . 1035) (nil fontified nil 1029 . 1035) (1029 . 1035)) ((#("Step 1" 0 5 (fontified nil) 5 6 (fontified nil rear-nonsticky nil)) . 1029) (undo-tree-id985 . -6) (undo-tree-id986 . -3) (undo-tree-id987 . -3) (undo-tree-id988 . -3) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -6) (undo-tree-id993 . -6) (undo-tree-id994 . -6) (undo-tree-id995 . -6) (undo-tree-id996 . -6) (undo-tree-id997 . -6) (undo-tree-id998 . -5) (undo-tree-id999 . -6) (nil rear-nonsticky t 1034 . 1035) (#("Step 2" 0 5 (fontified nil) 5 6 (rear-nonsticky nil fontified nil)) . 1164) (undo-tree-id1000 . -5) (undo-tree-id1001 . -6) (nil rear-nonsticky t 1169 . 1170) (#("Step 3" 0 5 (fontified nil) 5 6 (rear-nonsticky nil fontified nil)) . 1378) (undo-tree-id1002 . -5) (undo-tree-id1003 . -6) (nil rear-nonsticky t 1383 . 1384) (#("Step 4" 0 5 (fontified nil) 5 6 (rear-nonsticky nil fontified nil)) . 1565) (undo-tree-id1004 . -5) (undo-tree-id1005 . -6) (nil rear-nonsticky t 1570 . 1571)) (25241 29343 971992 549000) 0 nil])
nil
([nil nil ((1020 . 1025) 995 (t 25241 29407 660275 247000)) nil (25241 29460 322924 528000) 0 nil])
([nil nil ((#("Step 1" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . 1029) (undo-tree-id870 . -6) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id878 . -6) (undo-tree-id880 . -6) (undo-tree-id882 . -6) (undo-tree-id883 . -5) (undo-tree-id884 . -6) (undo-tree-id885 . -4) (undo-tree-id886 . -5) (undo-tree-id887 . -3) (undo-tree-id888 . -4) (undo-tree-id890 . -6) 1035 (t 25241 29314 180273 64000)) ((1029 . 1035)) (25241 29343 749262 795000) 0 nil])
([nil nil ((1025 . 1027)) nil (25241 29460 323075 910000) 0 nil])
([nil nil ((nil fontified nil 1033 . 1034) (nil fontified nil 1028 . 1033) (1028 . 1034)) ((#("Step 1" 0 4 (fontified nil face font-lock-function-name-face) 4 5 (fontified nil) 5 6 (rear-nonsticky t fontified nil)) . 1028) (undo-tree-id982 . -1) (undo-tree-id983 . -5) (undo-tree-id984 . -6) (nil fontified t 1033 . 1034)) (25241 29343 522058 990000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1025) (undo-tree-id1374 . -1) (#("l" 0 1 (fontified t)) . -1026) (undo-tree-id1375 . -1) 1027) nil (25241 29527 160 162000) 0 nil] [nil nil ((1025 . 1034) (#("ol" 0 2 (fontified t)) . -1025) (undo-tree-id1331 . -2) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -2) (undo-tree-id1338 . -1) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) 1027) ((1025 . 1027) (#("<ol></ol>" 0 1 (fontified t) 1 3 (fontified t face font-lock-function-name-face) 3 6 (fontified t) 6 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t)) . 1025) (undo-tree-id1345 . -4) (undo-tree-id1346 . -4) (undo-tree-id1347 . 6) (undo-tree-id1348 . -4) (undo-tree-id1349 . 9) (undo-tree-id1350 . -1)) (25241 29460 322915 736000) 0 nil])
([nil nil ((1028 . 1029) (t 25241 29333 520273 515000)) ((#(" " 0 1 (fontified t)) . 1028) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (t 25241 29336 460273 584000)) (25241 29336 442546 127000) 0 nil])
([nil nil ((1027 . 1031) (#(">" 0 1 (fontified nil syntax-table (1))) . -1027) (1025 . 1028)) nil (25241 29527 156 689000) 0 nil])
nil
nil
([nil nil ((1031 . 1032)) nil (25241 29527 155 242000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1028) (undo-tree-id1370 . -1) (#("i" 0 1 (fontified t)) . -1029) (undo-tree-id1371 . -1) (#("*" 0 1 (fontified t)) . -1030) (undo-tree-id1372 . -1) (#("4" 0 1 (fontified t)) . -1031) (undo-tree-id1373 . -1) 1032) nil (25241 29527 153 262000) 0 nil])
([nil nil ((1028 . 1032)) nil (25241 29527 147 483000) 0 nil])
([nil nil ((1094 . 1098) (1082 . 1084) (1066 . 1068) (1050 . 1052) (1034 . 1036) (1025 . 1091) (#("ol>ul*4" 0 2 (fontified t) 2 3 (fontified t syntax-table (1)) 3 7 (fontified t)) . -1025) (undo-tree-id1369 . -7) 1032) nil (25241 29527 145 744000) 0 nil])
([nil nil ((1103 . 1104)) nil (25241 29527 141 746000) 0 nil])
([nil nil ((#("    <b>Step 1</b>

Bring a large pot of lightly salted water to a boil. Add pasta and cook for 8 to 10 minutes or until al dente; drain.
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 12 (fontified t face (bold)) 12 13 (rear-nonsticky t fontified t face (bold)) 13 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 137 (fontified t)) . 1105) (undo-tree-id1356 . -136) (undo-tree-id1357 . -19) (undo-tree-id1358 . -137) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -17) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -17) (undo-tree-id1366 . -17) (undo-tree-id1367 . -7) (undo-tree-id1368 . -136) 1241) nil (25241 29527 139 482000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1176 . 1177) (nil fontified nil 1058 . 1177) (nil fontified nil 1057 . 1058) (nil fontified nil 1056 . 1057) (nil fontified nil 1055 . 1056) (nil fontified nil 1053 . 1055) (nil fontified nil 1052 . 1053) (nil fontified nil 1047 . 1052) (nil fontified nil 1046 . 1047) (nil fontified nil 1045 . 1046) (nil fontified nil 1044 . 1045) (nil fontified nil 1040 . 1044) (1040 . 1177)) nil (25241 29527 124 71000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . -1041) (undo-tree-id1355 . -1) 1042) nil (25241 29527 119 867000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1040) (undo-tree-id1354 . -1) 1041) nil (25241 29527 117 325000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1053) (undo-tree-id1353 . -1)) nil (25241 29527 114 645000) 0 nil])
([nil nil ((1173 . 1179) (1054 . 1055) 1177) nil (25241 29527 112 196000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1053) (undo-tree-id1352 . -1)) nil (25241 29527 110 198000) 0 nil])
([nil nil ((1053 . 1054) (#("	" 0 1 (fontified t)) . -1053)) nil (25241 29527 107 301000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1171) (undo-tree-id1351 . -1)) nil (25241 29527 104 854000) 0 nil])
([nil nil ((#("     " 0 5 (fontified t)) . -1172) 1171) nil (25241 29527 91 244000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1255) (undo-tree-id1422 . -1) (t 25241 29527 10278 33000)) nil (25241 29930 584109 29000) 0 nil])
([nil nil ((#("    <b>Step 4</b>

Bake in preheated oven for 30 minutes, or until cheese is melted and bubbly.
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 12 (fontified t face (bold)) 12 13 (rear-nonsticky t fontified t face (bold)) 13 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 95 (fontified t) 95 96 (rear-nonsticky t fontified t)) . 1641) (undo-tree-id1418 . -95) (undo-tree-id1419 . -19) (undo-tree-id1420 . -96) (undo-tree-id1421 . -95) 1736) nil (25241 29930 584102 825000) 0 nil])
([nil nil ((#("    <b>Step 3</b>

In a medium bowl, combine mozzarella, Cheddar and ricotta; stir well. In 9x13 inch pan, alternate layers of noodles, meat mixture and cheese mixture until pan is filled.
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 12 (fontified t face (bold)) 12 13 (rear-nonsticky t fontified t face (bold)) 13 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 189 (fontified t)) . 1452) (undo-tree-id1411 . -188) (undo-tree-id1412 . -19) (undo-tree-id1413 . -189) (undo-tree-id1414 . -189) (undo-tree-id1415 . -189) (undo-tree-id1416 . -189) (undo-tree-id1417 . -188) 1640) nil (25241 29930 583279 383000) 0 nil])
([nil nil ((#("    <b>Step 2</b>
Preheat oven to 350 degrees F (175 degrees C). In a large skillet over medium-high heat, brown beef and season with salt and pepper; drain. Stir in spaghetti sauce and garlic and simmer 5 minutes.

" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 12 (fontified t face (bold)) 12 13 (rear-nonsticky t fontified t face (bold)) 13 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 215 (fontified t) 215 216 (rear-nonsticky t fontified t)) . 1237) (undo-tree-id1390 . -216) (undo-tree-id1391 . -216) (undo-tree-id1392 . -216) (undo-tree-id1393 . -216) (undo-tree-id1394 . -215) (undo-tree-id1395 . -215) (undo-tree-id1396 . -216) (undo-tree-id1397 . 1) (undo-tree-id1398 . -215) (undo-tree-id1399 . -215) (undo-tree-id1400 . -215) (undo-tree-id1401 . -215) (undo-tree-id1402 . -215) (undo-tree-id1403 . -215) (undo-tree-id1404 . -215) (undo-tree-id1405 . -214) (undo-tree-id1406 . -215) (undo-tree-id1407 . -213) (undo-tree-id1408 . -214) (undo-tree-id1409 . -212) (undo-tree-id1410 . -213) 1452) nil (25241 29930 583260 919000) 0 nil])
([nil nil ((nil fontified nil 1403 . 1404) (nil fontified nil 1206 . 1403) (nil fontified nil 1205 . 1206) (nil fontified nil 1204 . 1205) (nil fontified nil 1203 . 1204) (nil fontified nil 1201 . 1203) (nil fontified nil 1200 . 1201) (nil fontified nil 1195 . 1200) (nil fontified nil 1194 . 1195) (nil fontified nil 1193 . 1194) (nil fontified nil 1192 . 1193) (nil fontified nil 1188 . 1192) (1188 . 1404)) nil (25241 29930 583214 333000) 0 nil])
([nil nil ((nil fontified nil 1635 . 1636) (nil fontified nil 1438 . 1635) (nil fontified nil 1437 . 1438) (nil fontified nil 1436 . 1437) (nil fontified nil 1435 . 1436) (nil fontified nil 1433 . 1435) (nil fontified nil 1432 . 1433) (nil fontified nil 1427 . 1432) (nil fontified nil 1426 . 1427) (nil fontified nil 1425 . 1426) (nil fontified nil 1424 . 1425) (nil fontified nil 1420 . 1424) (1420 . 1636)) nil (25241 29930 583205 211000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1608 . 1609) (nil fontified nil 1438 . 1609) (nil fontified nil 1437 . 1438) (nil fontified nil 1436 . 1437) (nil fontified nil 1435 . 1436) (nil fontified nil 1433 . 1435) (nil fontified nil 1432 . 1433) (nil fontified nil 1427 . 1432) (nil fontified nil 1426 . 1427) (nil fontified nil 1425 . 1426) (nil fontified nil 1424 . 1425) (nil fontified nil 1420 . 1424) (1420 . 1609) (#("    <b>Step 2</b>
Preheat oven to 350 degrees F (175 degrees C). In a large skillet over medium-high heat, brown beef and season with salt and pepper; drain. Stir in spaghetti sauce and garlic and simmer 5 minutes.

" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 12 (fontified t face (bold)) 12 13 (rear-nonsticky t fontified t face (bold)) 13 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 215 (fontified t) 215 216 (rear-nonsticky t fontified t)) . -1420) (undo-tree-id1388 . -216) (undo-tree-id1389 . -216) 1636) nil (25241 29930 583195 547000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1813 . 1814) (nil fontified nil 1643 . 1814) (nil fontified nil 1642 . 1643) (nil fontified nil 1641 . 1642) (nil fontified nil 1640 . 1641) (nil fontified nil 1638 . 1640) (nil fontified nil 1637 . 1638) (nil fontified nil 1632 . 1637) (nil fontified nil 1631 . 1632) (nil fontified nil 1630 . 1631) (nil fontified nil 1629 . 1630) (nil fontified nil 1625 . 1629) (1625 . 1814)) nil (25241 29930 583181 468000) 0 nil])
([nil nil ((nil fontified nil 1720 . 1721) (nil fontified nil 1644 . 1720) (nil fontified nil 1643 . 1644) (nil fontified nil 1642 . 1643) (nil fontified nil 1641 . 1642) (nil fontified nil 1640 . 1641) (nil fontified nil 1638 . 1640) (nil fontified nil 1637 . 1638) (nil fontified nil 1632 . 1637) (nil fontified nil 1631 . 1632) (nil fontified nil 1630 . 1631) (nil fontified nil 1629 . 1630) (nil fontified nil 1625 . 1629) (1625 . 1721) (#("    <b>Step 3</b>

In a medium bowl, combine mozzarella, Cheddar and ricotta; stir well. In 9x13 inch pan, alternate layers of noodles, meat mixture and cheese mixture until pan is filled.
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 12 (fontified t face (bold)) 12 13 (rear-nonsticky t fontified t face (bold)) 13 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 188 (fontified t) 188 189 (fontified t rear-nonsticky t)) . -1625) (undo-tree-id1376 . -189) (undo-tree-id1377 . -189) (undo-tree-id1378 . -189) (undo-tree-id1379 . -189) (undo-tree-id1380 . -189) (undo-tree-id1381 . -189) (undo-tree-id1382 . -189) (undo-tree-id1383 . -189) (undo-tree-id1384 . -189) (undo-tree-id1385 . -189) (undo-tree-id1386 . -189) (undo-tree-id1387 . -189) 1814) nil (25241 29930 583169 126000) 0 nil])
([nil nil ((1736 . 1742) (1658 . 1659) (1617 . 1623) (1446 . 1447) (1405 . 1411) (1206 . 1207) 1736) nil (25241 29951 29438 521000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1403) (undo-tree-id1440 . -1) (#("
" 0 1 (fontified t)) . 1403) (undo-tree-id1441 . -1) (t 25241 29930 590287 457000)) nil (25241 29999 501246 739000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 1205) (undo-tree-id1427 . -1) (t 25241 29930 590287 457000)) ((1205 . 1206)) (25241 29950 798431 334000) 0 nil])
([nil nil ((#("     " 0 5 (fontified t)) . -1404) 1403) nil (25241 29999 501243 108000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1402) (undo-tree-id1423 . -1) (#("
" 0 1 (fontified t)) . 1402) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1)) ((1402 . 1403) (1402 . 1403)) (25241 29950 626963 405000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1205) (undo-tree-id1439 . -1)) nil (25241 29999 501241 621000) 0 nil])
([nil nil ((#("     " 0 5 (fontified t)) . -1403) 1402) ((1403 . 1408)) (25241 29950 626825 472000) 0 nil])
([nil nil ((1205 . 1206) (#("	" 0 1 (fontified t)) . -1205)) nil (25241 29999 501239 418000) 0 nil])
nil
([nil nil ((#("   " 0 3 (fontified t)) . -1189) (undo-tree-id1438 . -3) 1192) nil (25241 29999 501237 836000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1433) (undo-tree-id1436 . -1) (#("
" 0 1 (fontified t)) . 1433) (undo-tree-id1437 . -1)) nil (25241 29999 501234 910000) 0 nil])
([nil nil ((1433 . 1434) (#("	" 0 1 (fontified t)) . -1433)) nil (25241 29999 501231 410000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1603) (undo-tree-id1435 . -1)) nil (25241 29999 501230 5000) 0 nil])
([nil nil ((#("     " 0 5 (fontified t)) . -1604) 1603) nil (25241 29999 501227 851000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1637) (undo-tree-id1433 . -1) (#("
" 0 1 (fontified t)) . 1637) (undo-tree-id1434 . -1)) nil (25241 29999 501226 76000) 0 nil])
([nil nil ((1637 . 1638) (#("	" 0 1 (fontified t)) . -1637)) nil (25241 29999 501222 594000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1714) (undo-tree-id1432 . -1)) nil (25241 29999 501221 101000) 0 nil])
([nil nil ((#("     " 0 5 (fontified t)) . -1715) 1714) nil (25241 29999 501218 619000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . -1621) (undo-tree-id1428 . -3) (undo-tree-id1429 . -3) (undo-tree-id1430 . -3) (undo-tree-id1431 . -3) 1624) nil (25241 29999 501215 567000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . -1417)) nil (25241 29999 501198 365000) 0 nil])
([nil nil ((#("ul" 0 2 (fontified t face font-lock-function-name-face)) . -1037) (undo-tree-id1445 . -2) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) 1040 (t 25241 29999 510289 66000)) nil (25241 30053 228248 759000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 71) (1186 . 1187) (apply deactivate-cursor-after-undo 71) (apply activate-cursor-for-undo 72) (1413 . 1414) (apply deactivate-cursor-after-undo 72) (apply activate-cursor-for-undo 73) (1613 . 1614) (apply deactivate-cursor-after-undo 73) (1038 . 1039) (apply activate-cursor-for-undo 73) (1611 . 1612) (#("ul" 0 2 (fontified t face font-lock-function-name-face)) . -1611) (undo-tree-id1442 . -2) (apply deactivate-cursor-after-undo 73) (apply activate-cursor-for-undo 72) (1411 . 1412) (#("ul" 0 2 (fontified t face font-lock-function-name-face)) . -1411) (undo-tree-id1443 . -2) (apply deactivate-cursor-after-undo 72) (apply activate-cursor-for-undo 71) (1184 . 1185) (#("ul" 0 2 (fontified t face font-lock-function-name-face)) . -1184) (undo-tree-id1444 . -2) (apply deactivate-cursor-after-undo 71) (1037 . 1038)) nil (25241 30053 228184 833000) 0 nil])
([nil current ((apply activate-cursor-for-undo 77) (#("<b>Step 4</b>" 0 1 (fontified t) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t) 3 8 (fontified t face (bold)) 8 9 (rear-nonsticky t fontified t face (bold)) 9 11 (fontified t) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t)) . 1579) (undo-tree-id1499 . -9) (undo-tree-id1500 . -3) (undo-tree-id1501 . -3) (undo-tree-id1502 . -3) (undo-tree-id1503 . -7) (undo-tree-id1504 . -9) (undo-tree-id1505 . -13) (undo-tree-id1506 . -13) (apply deactivate-cursor-after-undo 77) (apply activate-cursor-for-undo 76) (#("<b>Step 3</b>" 0 1 (fontified t) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t) 3 8 (fontified t face (bold)) 8 9 (rear-nonsticky t fontified t face (bold)) 9 11 (fontified t) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t)) . 1391) (undo-tree-id1507 . -3) (undo-tree-id1508 . -3) (undo-tree-id1509 . -3) (undo-tree-id1510 . -7) (undo-tree-id1511 . -9) (undo-tree-id1512 . -13) (undo-tree-id1513 . -13) (apply deactivate-cursor-after-undo 76) (apply activate-cursor-for-undo 75) (#("<b>Step 2</b>" 0 1 (fontified t) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t) 3 8 (fontified t face (bold)) 8 9 (rear-nonsticky t fontified t face (bold)) 9 11 (fontified t) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t)) . 1176) (undo-tree-id1514 . -3) (undo-tree-id1515 . -3) (undo-tree-id1516 . -3) (undo-tree-id1517 . -7) (undo-tree-id1518 . -9) (undo-tree-id1519 . -13) (undo-tree-id1520 . -13) (apply deactivate-cursor-after-undo 75) (#("<b>Step 1</b>" 0 1 (fontified t) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t) 3 8 (fontified t face (bold)) 8 9 (rear-nonsticky t fontified t face (bold)) 9 11 (fontified t) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t)) . 1040) (undo-tree-id1521 . -13) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -13) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -1) (undo-tree-id1531 . -3) (undo-tree-id1532 . -3) (undo-tree-id1533 . -3) (undo-tree-id1534 . -3) (undo-tree-id1535 . -3) (undo-tree-id1536 . -3) (undo-tree-id1537 . -3) (undo-tree-id1538 . -3) (undo-tree-id1539 . -3) (undo-tree-id1540 . -3) (undo-tree-id1541 . -3) (undo-tree-id1542 . -3) (undo-tree-id1543 . -3) (undo-tree-id1544 . -3) (undo-tree-id1545 . -7) (undo-tree-id1546 . -3) (undo-tree-id1547 . -3) (undo-tree-id1548 . -3) (undo-tree-id1549 . -3) (undo-tree-id1550 . -7) (undo-tree-id1551 . -7) (undo-tree-id1552 . -7) (undo-tree-id1553 . -7) (undo-tree-id1554 . -9) (undo-tree-id1555 . -7) (undo-tree-id1556 . -7) (undo-tree-id1557 . -7) (undo-tree-id1558 . -7) (undo-tree-id1559 . -9) (undo-tree-id1560 . -9) (undo-tree-id1561 . 1) (undo-tree-id1562 . -13) (undo-tree-id1563 . 4) (undo-tree-id1564 . -10) (undo-tree-id1565 . -9) (undo-tree-id1566 . -9) (undo-tree-id1567 . -9) (undo-tree-id1568 . -9) (undo-tree-id1569 . -13) (undo-tree-id1570 . -9) (undo-tree-id1571 . -9) (undo-tree-id1572 . -9) (undo-tree-id1573 . -9) (undo-tree-id1574 . -13) (undo-tree-id1575 . -13) (undo-tree-id1576 . -13) (undo-tree-id1577 . -13) (undo-tree-id1578 . -13) (undo-tree-id1579 . -13) (undo-tree-id1580 . -13) (undo-tree-id1581 . -13) (undo-tree-id1582 . -13) (undo-tree-id1583 . -13) (undo-tree-id1584 . -13) (undo-tree-id1585 . -13) (undo-tree-id1586 . -13) (undo-tree-id1587 . -13) (undo-tree-id1588 . -13) (undo-tree-id1589 . -13) (undo-tree-id1590 . -13) 1053 (t 25241 30053 240290 321000)) nil (25241 30094 675931 389000) 0 nil])
nil
